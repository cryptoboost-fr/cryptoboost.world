// üß™ TEST RAPIDE SITE LIVE CRYPTOBOOST
// Script √† copier dans la console du navigateur sur https://cryptoboost.world

console.log('üöÄ TEST RAPIDE CRYPTOBOOST - SITE LIVE');
console.log('=====================================');
console.log(`‚è∞ ${new Date().toLocaleString()}`);
console.log(`üåê ${window.location.href}`);
console.log('');

let tests = 0;
let success = 0;
let errors = 0;
let warnings = 0;

function test(name, condition, severity = 'normal') {
    tests++;
    if (condition) {
        console.log(`‚úÖ ${name}`);
        success++;
        return true;
    } else {
        const icon = severity === 'high' ? '‚ùå' : severity === 'medium' ? 'üü†' : '‚ö†Ô∏è';
        console.log(`${icon} ${name}`);
        if (severity === 'high') errors++;
        else warnings++;
        return false;
    }
}

// Test 1: Base
console.log('üèóÔ∏è TEST 1: STRUCTURE DE BASE');
console.log('===========================');

test('Site accessible', true, 'high');
test('HTTPS actif', window.location.protocol === 'https:', 'high');
test('Titre CryptoBoost', document.title.includes('CryptoBoost'), 'high');
test('Meta viewport', !!document.querySelector('meta[name="viewport"]'), 'high');
test('Favicon pr√©sent', !!document.querySelector('link[rel*="icon"]'), 'medium');

console.log('');
console.log('üìÑ TEST 2: PAGES ET NAVIGATION');
console.log('==============================');

// Test des liens de navigation
const navLinks = document.querySelectorAll('nav a, .nav a, header a');
test(`Liens de navigation (${navLinks.length})`, navLinks.length > 0, 'medium');

// Test pr√©sence des sections principales
const sections = ['hero', 'features', 'stats', 'testimonials', 'faq', 'contact'];
sections.forEach(section => {
    const element = document.getElementById(section);
    test(`Section ${section}`, !!element, section === 'hero' ? 'high' : 'medium');
});

console.log('');
console.log('üé® TEST 3: DESIGN ET CSS');
console.log('========================');

// Test des styles CSS
test('Feuille de style principale', !!document.querySelector('link[href*="styles.css"]'), 'high');
test('Tailwind CSS charg√©', !!document.querySelector('[class*="bg-"], [class*="text-"], [class*="p-"]'), 'medium');

// Test des variables CSS
const body = document.body;
const computedStyle = getComputedStyle(body);
test('Variables CSS crypto', computedStyle.getPropertyValue('--crypto-primary').length > 0, 'medium');
test('Variables CSS premium', computedStyle.getPropertyValue('--cb-primary').length > 0, 'medium');

console.log('');
console.log('‚öôÔ∏è TEST 4: FONCTIONNALIT√âS JS');
console.log('============================');

// Test des fonctions critiques
const criticalFunctions = [
    'showLogin', 'showRegister', 'validateAuth',
    'showDashboard', 'showInvestments', 'showTransactions'
];

criticalFunctions.forEach(func => {
    test(`Fonction ${func}`, typeof window[func] === 'function', 'high');
});

// Test des modals
const modals = ['loginModal', 'registerModal'];
modals.forEach(modal => {
    test(`Modal ${modal}`, !!document.getElementById(modal), 'high');
});

console.log('');
console.log('üîó TEST 5: APIs ET ASSETS');
console.log('=========================');

// Test des assets critiques
const assets = [
    '/assets/logo.svg',
    '/assets/hero-chart.svg',
    '/assets/favicon.svg',
    '/styles.css',
    '/app.js',
    '/auth.js'
];

assets.forEach(async (asset) => {
    try {
        const response = await fetch(asset, { method: 'HEAD' });
        test(`Asset ${asset.split('/').pop()}`, response.ok, asset.includes('logo') || asset.includes('.js') ? 'high' : 'medium');
    } catch (error) {
        test(`Asset ${asset.split('/').pop()}`, false, asset.includes('logo') || asset.includes('.js') ? 'high' : 'medium');
    }
});

// Test des APIs Netlify
const apis = [
    '/.netlify/functions/github-db?collection=users',
    '/.netlify/functions/coinapi?action=rates&quote=EUR'
];

setTimeout(() => {
    apis.forEach(async (api) => {
        try {
            const response = await fetch(api, { method: 'GET' });
            test(`API ${api.split('/').pop()}`, response.ok, 'high');
        } catch (error) {
            test(`API ${api.split('/').pop()}`, false, 'high');
        }
    });
}, 1000);

console.log('');
console.log('üì± TEST 6: RESPONSIVE MOBILE');
console.log('===========================');

test('Largeur d\'√©cran d√©tect√©e', window.innerWidth > 0, 'medium');
test('Taille mobile (< 768px)', window.innerWidth < 768, 'medium');
test('Taille tablette (768px-1024px)', window.innerWidth >= 768 && window.innerWidth <= 1024, 'medium');
test('Taille desktop (> 1024px)', window.innerWidth > 1024, 'medium');

console.log('');
console.log('‚ú® TEST 7: ANIMATIONS ET UX');
console.log('===========================');

// Test des animations CSS
test('Animations CSS', !!document.querySelector('[class*="animate"], [class*="fade"], [class*="slide"]'), 'medium');
test('Transitions CSS', !!document.querySelector('[style*="transition"], [class*="transition"]'), 'medium');

// Test des √©l√©ments interactifs
const buttons = document.querySelectorAll('button, [role="button"], .btn');
test(`Boutons interactifs (${buttons.length})`, buttons.length > 0, 'medium');

const forms = document.querySelectorAll('form, [role="form"]');
test(`Formulaires (${forms.length})`, forms.length > 0, 'medium');

console.log('');
console.log('üö® TEST 8: ERREURS CONSOLE');
console.log('==========================');

// Surveillance des erreurs console
const originalError = console.error;
const originalWarn = console.warn;
let consoleErrors = 0;
let consoleWarnings = 0;

console.error = function(...args) {
    consoleErrors++;
    originalError.apply(console, args);
};

console.warn = function(...args) {
    consoleWarnings++;
    originalWarn.apply(console, args);
};

setTimeout(() => {
    console.error = originalError;
    console.warn = originalWarn;

    test(`Erreurs console (${consoleErrors})`, consoleErrors === 0, 'high');
    test(`Avertissements console (${consoleWarnings})`, consoleWarnings <= 3, 'medium');
}, 3000);

console.log('');
console.log('üí∞ TEST 9: FONCTIONNALIT√âS CRYPTO');
console.log('===============================');

// Test du contenu crypto
const cryptoContent = document.body.textContent;
const cryptoCurrencies = ['BTC', 'ETH', 'USDT', 'USDC'];
cryptoCurrencies.forEach(crypto => {
    test(`Support ${crypto}`, cryptoContent.includes(crypto), 'medium');
});

const transactionTypes = ['DEPOSIT', 'WITHDRAW', 'EXCHANGE', 'INVEST'];
transactionTypes.forEach(type => {
    test(`Type ${type}`, cryptoContent.includes(type), 'medium');
});

// Rapport final
setTimeout(() => {
    const score = Math.round((success / tests) * 100);

    console.log('');
    console.log(''.padEnd(60, '='));
    console.log('üéØ RAPPORT FINAL TEST SITE LIVE CRYPTOBOOST');
    console.log(''.padEnd(60, '='));

    console.log('');
    console.log('üìä R√âSULTATS G√âN√âRAUX:');
    console.log('====================');
    console.log(`‚úÖ Tests r√©ussis: ${success}/${tests}`);
    console.log(`‚ùå Erreurs critiques: ${errors}`);
    console.log(`‚ö†Ô∏è Avertissements: ${warnings}`);
    console.log(`üéØ Score global: ${score}%`);

    console.log('');
    console.log('üìã √âVALUATION:');
    console.log('==============');

    if (score >= 90) {
        console.log('üéâ EXCELLENT - Site live parfait !');
        console.log('   ‚úÖ Toutes les fonctionnalit√©s op√©rationnelles');
        console.log('   ‚úÖ Interface responsive mobile');
        console.log('   ‚úÖ APIs fonctionnelles');
        console.log('   ‚úÖ Aucune erreur d√©tect√©e');
    } else if (score >= 80) {
        console.log('üëç TR√àS BON - Quelques am√©liorations mineures');
        console.log('   ‚ö†Ô∏è Quelques probl√®mes √† corriger');
        console.log('   ‚úÖ Base fonctionnelle solide');
    } else if (score >= 70) {
        console.log('üü° BON - Corrections recommand√©es');
        console.log('   ‚ùå Probl√®mes d√©tect√©s n√©cessitant attention');
        console.log('   ‚úÖ Fonctionnalit√©s principales OK');
    } else {
        console.log('‚ùå CRITIQUE - Probl√®mes majeurs');
        console.log('   üö® Corrections urgentes requises');
        console.log('   ‚ùå Fonctionnalit√©s d√©faillantes');
    }

    console.log('');
    console.log('üîß RECOMMANDATIONS:');
    console.log('===================');

    if (errors > 0) {
        console.log('üö® Corriger les erreurs critiques d√©tect√©es');
    }
    if (warnings > 3) {
        console.log('‚ö†Ô∏è Adresser les avertissements');
    }
    if (score < 85) {
        console.log('üîß Utiliser les scripts de correction automatique');
    }

    console.log('');
    console.log('üìÖ R√âSUM√â:');
    console.log('=========');
    console.log(`üåê Site test√©: ${window.location.href}`);
    console.log(`üìÖ Date: ${new Date().toLocaleString()}`);
    console.log(`üì± R√©solution: ${window.innerWidth}x${window.innerHeight}`);
    console.log(`üîß Navigateur: ${navigator.userAgent.split(' ').pop()}`);

    console.log('');
    console.log(''.padEnd(60, '='));
    console.log('üèÅ TEST SITE LIVE TERMIN√â');
    console.log(''.padEnd(60, '='));

    if (score >= 90) {
        console.log('');
        console.log('üéâ F√âLICITATIONS !');
        console.log('=================');
        console.log('Votre CryptoBoost live est PARFAIT !');
        console.log('‚úÖ Pr√™t pour la production');
        console.log('‚úÖ Interface 100% fonctionnelle');
        console.log('‚úÖ Aucune erreur d√©tect√©e');
    }
}, 5000);

console.log('üîç Test du site live en cours... Rapport dans 5 secondes...');
console.log('‚è≥ Analyse des fonctionnalit√©s, APIs, mobile, et erreurs...');
